import React from 'react';
import fetch from 'isomorphic-fetch';
import { Map, TileLayer, GeoJSON, Marker, Choropleth, InfoControl } from '../../src/';

import L from 'leaflet';

import GEOJSON from './geojson';
const STATES_URL = 'dist/states.json';

export default class Examples extends React.Component {

  constructor (props) {
    super(props);
    this.state = {
      states: null
    };
  }

  componentWillMount () {
    fetch(STATES_URL)
    .then(response => response.json())
    .then(geojson =>  this.setState({ states: geojson }));
  }

  render() {
    const { states } = this.state;
    return (
      <div>
        <h1>Leaflet choropleth example</h1>

        {!this.props.lala ?
        <Map
          style={{ width: '100%', marginTop: 50, height: 600 }}
          center={[37.8, -96]}
          zoom={4}
          >
          <TileLayer />
          <InfoControl position='topright'> 
            <Choropleth
              data={states}
              legend='bottomright'
              legendClass='info legend'
              valueProperty='density'
              steps={8}
              buckets={[0, 10, 20, 50, 100, 200, 500, 1000, 'inf']}
              colors={['#FFEDA0', '#FED976', '#FEB24C', '#FD8D3C', '#FC4E2A', '#E31A1C', '#BD0026', '#800026']}
              infoContent={feature => 
                <div>
                  <h4>US Population Density</h4>
                  { 
                    feature ? 
                      <div>
                        <b>{feature.properties.name}</b>
                        <br />
                        {feature.properties.density} people / mi<sup>2</sup>
                      </div>
                        : 
                          <span>Hover over a state...</span>
                   }
                 </div>
                 }
              onClick={(map, layer) => map.fitBounds(layer.getBounds()) }
              style={{
                weight: 2,
                opacity: 1,
                color: 'white',
                dashArray: 3,
                fillOpacity: 0.7
              }}
              highlightStyle={{ weight: 5, color: '#666', dashArray: '', fillOpacity: 0.7  }}
            />
          </InfoControl>
        </Map>
        : 
          (this.props.lala2 ? 
          <Map
            style={{ width: '100%', height: 300 }}
            center={[51.505, -0.09]}
            zoom={13}
            >
            <TileLayer
              url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'
              attribution='&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
            />
            <Marker
              latlng={[51.5, -0.09]}
              popupContent={feature => <span>A pretty CSS3 popup.<br /> Easily customizable.</span>}
            />

        </Map>
        :
         <Map
           style={{ width: '100%', height: 400 }}
           center={[39.74739, -105]}
           zoom={13}
           >
           <TileLayer
             url='https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpandmbXliNDBjZWd2M2x6bDk3c2ZtOTkifQ._QA7i5Mpkd_m30IGElHziw'
             attribution='Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://mapbox.com">Mapbox</a>'
             id='mapbox.light'
           />
           <GeoJSON
             data={[GEOJSON.bicycleRental, GEOJSON.campus]}
             style={feature => feature.properties && feature.properties.style}
             popupContent={popupContent}
             circleMarkers
             markerStyle={{
              radius: 8,
              fillColor: "#ff7800",
              color: "#000",
              weight: 1,
              opacity: 1,
              fillOpacity: 0.8
            }}
           />

           <GeoJSON
             data={GEOJSON.freeBus}
             popupContent={popupContent}
             filter={(feature, layer) => 
               feature.properties && feature.properties.underConstruction != null ? !feature.properties.underConstruction : false
             }
           />

           <GeoJSON
             data={GEOJSON.coorsField}
             popupContent={popupContent}
             markerOptions={{ 
               icon: L.icon({
                 iconUrl: 'dist/baseball-marker.png',
                 iconSize: [32, 37],
                 iconAnchor: [16, 37],
                 popupAnchor: [0, -28]
               }) 
             }}
           />

         </Map>
          )
            
          
        }
      </div>
    );
  }
}

function popupContent (feature, layer) {
  return <span>
    <p>
      {`I started out as a GeoJSON ${feature.geometry.type}, but now I'm a Leaflet vector!`}
    </p>
    <p>
      { feature.properties.popupContent }
    </p>
  </span>;
}
